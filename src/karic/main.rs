extern crate kari;
extern crate clap;

use std::io::prelude::*;
use std::fs::File;
use clap::{Arg, App};

fn main() {
    let matches = App::new("karic")
        .version("0.1.0")
        .author("Benjamin Lee <benjamin.fik.lee@gmail.com>")
        .about("Compile kari programs to bytecode")
        .arg(Arg::with_name("SOURCE")
            .help("Source file name")
            .required(true))
        .arg(Arg::with_name("debug-lexer")
            .long("debug-lexer")
            .help("Print the output of the lexer"))
        .arg(Arg::with_name("AST_OUT")
            .long("output-ast")
            .takes_value(true)
            .help("Output the AST as a graphviz dot file"))
        .arg(Arg::with_name("debug-bytecode")
            .long("debug-bytecode")
            .help("Print the generated bytecode"))
        .get_matches();

    let source_fname = matches.value_of("SOURCE").unwrap();
    let mut source = String::new();
    File::open(source_fname).ok().expect("Could not read source")
        .read_to_string(&mut source).unwrap();

    let tokens = kari::lexer::lex_source(source, Some(source_fname.to_string()));
    if matches.is_present("debug-lexer") {
        println!("{:?}", tokens.iter().map(|t| format!("{}", t.0)).collect::<Vec<String>>());
    }

    let ast = kari::parser::Parser::new(tokens).parse().unwrap();
    if let Some(fname) = matches.value_of("AST_OUT") {
        let dotgraph = ast.0.visualize_dot();
        File::create(fname).unwrap().write(&dotgraph.into_bytes()[..]).unwrap();
    }

    let bytecode = kari::compile::compile_ast(ast).unwrap();
    if matches.is_present("debug-bytecode") {
        println!("{}",
            bytecode.iter().map(|o| format!("{}", o)).collect::<Vec<String>>().join("\n"));
    }

    let mut interpreter = kari::interpreter::Interpreter::new();
    interpreter.add_blocks(bytecode);
    interpreter.run_block(kari::bytecode::BlockId(0)).unwrap();
    println!("{:?}", interpreter.variables);
}
